component:
  name: sample
  description: ''
  provider: fate
  version: 2.0.0-alpha
  labels: [ ]
  roles:
    - guest
    - host
  parameters:
    mode:
      type: type
      default: random
      optional: true
      description: sample mode, if select 'weight', will use dataframe's weight as
        sampling weight, default 'random'
      type_meta:
        title: type
        type: string
    replace:
      type: bool
      default: false
      optional: true
      description: whether allow sampling with replacement, default False
      type_meta:
        title: bool
        type: boolean
        default: false
        description: whether allow sampling with replacement, default False
    frac:
      type: typing.Union[fate.components.core.params._fields.ConstrainedFloatValue,
        typing.Mapping[typing.Union[fate.components.core.params._fields.ConstrainedIntValue,
        fate.components.core.params._fields.ConstrainedFloatValue], fate.components.core.params._fields.ConstrainedFloatValue]]
      default:
      optional: true
      description: 'if mode equals to random, it should be a float number greater
        than 0,otherwise a dict of pairs like [label_i, sample_rate_i],e.g. {0: 0.5,
        1: 0.8, 2: 0.3}, any label unspecified in dict will not be sampled,default:
        1.0, cannot be used with n'
      type_meta:
        title: typing.Union[fate.components.core.params._fields.ConstrainedFloatValue,
          typing.Mapping[typing.Union[fate.components.core.params._fields.ConstrainedIntValue,
          fate.components.core.params._fields.ConstrainedFloatValue], fate.components.core.params._fields.ConstrainedFloatValue]]
        anyOf:
          - type: number
            exclusiveMinimum: 0.0
          - type: object
            additionalProperties:
              type: number
              exclusiveMinimum: 0.0
        default:
        description: 'if mode equals to random, it should be a float number greater
          than 0,otherwise a dict of pairs like [label_i, sample_rate_i],e.g. {0:
          0.5, 1: 0.8, 2: 0.3}, any label unspecified in dict will not be sampled,default:
          1.0, cannot be used with n'
    n:
      type: typing.Union[fate.components.core.params._fields.ConstrainedIntValue,
        typing.Mapping[typing.Union[fate.components.core.params._fields.ConstrainedIntValue,
        fate.components.core.params._fields.ConstrainedFloatValue], fate.components.core.params._fields.ConstrainedIntValue]]
      default:
      optional: true
      description: 'exact sample size, it should be an int greater than 0, otherwise
        a dict of pairs like [label_i, sample_count_i],e.g. {0: 50, 1: 20, 2: 30},
        any label unspecified in dict will not be sampled,default: None, cannot be
        used with frac'
      type_meta:
        title: typing.Union[fate.components.core.params._fields.ConstrainedIntValue,
          typing.Mapping[typing.Union[fate.components.core.params._fields.ConstrainedIntValue,
          fate.components.core.params._fields.ConstrainedFloatValue], fate.components.core.params._fields.ConstrainedIntValue]]
        anyOf:
          - type: integer
            exclusiveMinimum: 0
          - type: object
            additionalProperties:
              type: integer
              exclusiveMinimum: 0
        default:
        description: 'exact sample size, it should be an int greater than 0, otherwise
          a dict of pairs like [label_i, sample_count_i],e.g. {0: 50, 1: 20, 2: 30},
          any label unspecified in dict will not be sampled,default: None, cannot
          be used with frac'
    random_state:
      type: ConstrainedNumberMeta
      default:
      optional: true
      description: random state
      type_meta:
        title: ConstrainedNumberMeta
        minimum: 0
        type: integer
    ctx_mode:
      type: type
      default: hetero
      optional: true
      description: sampling mode, 'homo' & 'local' will both sample locally
      type_meta:
        title: type
        type: string
  input_artifacts:
    data:
      input_data:
        types:
          - dataframe
        optional: false
        stages:
          - train
        roles:
          - guest
          - host
        description: ''
        is_multi: false
    model: { }
  output_artifacts:
    data:
      output_data:
        types:
          - dataframe
        optional: false
        stages:
          - train
        roles:
          - guest
          - host
        description: ''
        is_multi: false
    model: { }
    metric:
      metric:
        types:
          - json_metric
        optional: false
        stages: [ ]
        roles: [ ]
        description: metric, invisible for user
        is_multi: false
schema_version: v1
